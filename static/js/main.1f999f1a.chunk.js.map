{"version":3,"sources":["common/index.js","components/FormHeading/index.jsx","components/LineInput/index.jsx","components/Button/index.jsx","components/GeneralInfo/index.jsx","components/EntryBreak/index.jsx","components/Education/index.jsx","components/MultiLineInput/index.jsx","components/WorkExp/index.jsx","App.js","index.js"],"names":["AnswerObj","answers","saved","newEntry","this","copyFormData","obj","Object","entries","reduce","newObj","stateObjKey","stateObjValue","map","a","assign","getStateAttr","elem","closest","getAttribute","getEntryOrder","parseInt","FormHeading","props","title","className","LineInput","label","type","inputValue","inputkey","inputChange","value","onChange","required","Button","clickFunc","additionalClass","buttonType","children","onClick","e","GeneralInfo","data","sectionSaveEdit","name","email","phone","state","onSubmit","grouporder","EntryBreak","Education","deleteEntry","answer","key","school","course","dateFrom","dateTo","savedLineInput","length","toString","buttonsContainer","MultiLineInput","rows","WorkExp","employer","jobTitle","mainTasks","App","useState","generalInfo","education","jobs","formData","setFormData","event","stateKey","target","entryOrder","inputKey","newFormData","preventDefault","newEntryObj","push","splice","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f999f1a.chunk.js","sourcesContent":["//generalised object that can be used to hold data for any of the 3 states. see readme for more\nfunction AnswerObj(answers = [], saved = false, newEntry = false) {\n  this.answers = answers;\n  this.saved = saved;\n  this.newEntry = newEntry;\n}\n\nconst copyFormData = (obj) => {\n  return Object.entries(obj).reduce((newObj, [stateObjKey, stateObjValue]) => {\n    newObj[stateObjKey] = new AnswerObj(\n      stateObjValue.answers.map((a) => Object.assign({}, a)),\n      stateObjValue.saved,\n      stateObjValue.newEntry\n    );\n    return newObj;\n  }, {});\n};\n\n//figures out which state the element corresponds to\nconst getStateAttr = (elem) => {\n  return elem.closest(\"form\").getAttribute(\"state\");\n};\n\n//determines which entry the element corresponds to\nconst getEntryOrder = (elem) => {\n  return parseInt(\n    elem.closest(\".group-order-indicator\").getAttribute(\"grouporder\")\n  );\n};\n\nexport { AnswerObj, getStateAttr, getEntryOrder, copyFormData };\n","import React from \"react\";\nimport \"./FormHeading.scss\";\n\nconst FormHeading = (props) => (\n  <div>\n    <h2>{props.title}</h2>\n    <div className=\"line-break\" />\n  </div>\n);\n\nexport default FormHeading;\n","import React from \"react\";\nimport \"./LineInput.scss\";\n\nconst LineInput = ({\n  label,\n  type,\n  saved,\n  inputValue,\n  inputkey,\n  inputChange,\n}) => (\n  <div className=\"form-question\">\n    <label className=\"regular-font-size\">{label}</label>\n    {saved ? (\n      <span className=\"regular-font-size\">{inputValue}</span>\n    ) : (\n      <input\n        type={type}\n        className=\"hover-highlight regular-font-size border-radius border-width\"\n        value={inputValue}\n        inputkey={inputkey}\n        onChange={inputChange}\n        required\n      />\n    )}\n  </div>\n);\n\nexport default LineInput;\n","import React from \"react\";\nimport \"./Button.scss\";\n\nconst Button = ({ clickFunc, additionalClass, buttonType, children }) => {\n  return (\n    <button\n      className={`btn border-radius border-width regular-font-size ${\n        additionalClass ? additionalClass : \"normal\"\n      }`}\n      type={buttonType}\n      onClick={(e) => (clickFunc ? clickFunc(e) : () => {})}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport FormHeading from \"../FormHeading\";\nimport LineInput from \"../LineInput\";\nimport Button from \"../Button\";\n\nconst GeneralInfo = ({ data, sectionSaveEdit, inputChange }) => {\n  //only need to get the first entry because you can't add new entries in this section\n  const { saved } = data;\n  const { name, email, phone } = data.answers[0];\n\n  return (\n    //see readme for purpose of state, grouporder and inputkey attributes.\n    <form state=\"generalInfo\" onSubmit={sectionSaveEdit}>\n      <FormHeading title=\"General Info\" />\n      <div className=\"group-order-indicator\" grouporder=\"0\" key=\"0\">\n        <LineInput\n          label=\"Name\"\n          inputkey=\"name\"\n          inputValue={name}\n          type=\"text\"\n          inputChange={inputChange}\n          saved={saved}\n        />\n        <LineInput\n          label=\"Email\"\n          inputkey=\"email\"\n          type=\"email\"\n          inputChange={inputChange}\n          inputValue={email}\n          saved={saved}\n        />\n        <LineInput\n          label=\"Phone number\"\n          inputkey=\"phone\"\n          type=\"number\"\n          inputChange={inputChange}\n          inputValue={phone}\n          saved={saved}\n        />\n        <div className=\"buttons-container\">\n          <Button buttonType=\"submit\">{saved ? \"Edit\" : \"Save\"}</Button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default GeneralInfo;\n","import React from \"react\";\nimport \"./EntryBreak.scss\";\n\nconst EntryBreak = () => <div className=\"entry-break\" />;\n\nexport default EntryBreak;\n","import React from \"react\";\nimport FormHeading from \"../FormHeading\";\nimport Button from \"../Button\";\nimport LineInput from \"../LineInput\";\nimport EntryBreak from \"../EntryBreak\";\n\nconst Education = ({\n  data,\n  inputChange,\n  sectionSaveEdit,\n  newEntry,\n  deleteEntry,\n}) => {\n  //generates all the entries that need to be rendered in this section\n  const entries = data.answers.map((answer, key) => {\n    const { school, course, dateFrom, dateTo } = data.answers[key];\n\n    //determines whether line input should be editable\n    const savedLineInput =\n      data.saved && !(data.newEntry && key + 1 === data.answers.length);\n\n    //see readme for purpose of grouporder and inputkey attributes\n    return (\n      <div\n        className=\"group-order-indicator\"\n        grouporder={key}\n        key={key.toString() + \"-education\"}\n      >\n        {\n          // if it's not the first entry, add a separator to the previous entry\n          key > 0 && <EntryBreak />\n        }\n        <LineInput\n          label=\"School name\"\n          inputkey=\"school\"\n          type=\"text\"\n          inputChange={inputChange}\n          inputValue={school}\n          saved={savedLineInput}\n        />\n        <LineInput\n          label=\"Course name\"\n          inputkey=\"course\"\n          type=\"text\"\n          inputChange={inputChange}\n          inputValue={course}\n          saved={savedLineInput}\n        />\n        <LineInput\n          label=\"Date from\"\n          inputkey=\"dateFrom\"\n          type=\"date\"\n          inputChange={inputChange}\n          inputValue={dateFrom}\n          saved={savedLineInput}\n        />\n        <LineInput\n          label=\"Date to\"\n          inputkey=\"dateTo\"\n          type=\"date\"\n          inputChange={inputChange}\n          inputValue={dateTo}\n          saved={savedLineInput}\n        />\n        {\n          /*renders the delete entry button. should only appear when 1) we're not creating a new entry; and 2) the section is in edit mode\n           */\n          !data.newEntry && !data.saved && (\n            <div className=\"buttons-container\">\n              <Button\n                buttonType=\"button\"\n                clickFunc={deleteEntry}\n                additionalClass=\"danger\"\n              >\n                Delete\n              </Button>\n            </div>\n          )\n        }\n      </div>\n    );\n  });\n\n  /*container for the buttons at the end of the section. 3 rendering scenarios...\n    1. no entries -> only Add button\n    2. new entry is being added or the section has been made editable -> only Save button\n    3. 1 or several entries in section, all saved -> Edit and Add buttons\n  */\n  const buttonsContainer =\n    data.answers.length === 0 ? (\n      <div className=\"buttons-container\">\n        <Button buttonType=\"button\" clickFunc={newEntry}>\n          Add\n        </Button>\n      </div>\n    ) : data.newEntry || !data.saved ? (\n      <div className=\"buttons-container\">\n        <Button buttonType=\"submit\">Save</Button>\n      </div>\n    ) : (\n      <div className=\"buttons-container\">\n        <Button buttonType=\"submit\">Edit</Button>\n        <div />\n        <Button buttonType=\"button\" clickFunc={newEntry}>\n          Add\n        </Button>\n      </div>\n    );\n\n  return (\n    <form state=\"education\" onSubmit={sectionSaveEdit}>\n      <FormHeading title=\"Education\" />\n      {entries}\n      {buttonsContainer}\n    </form>\n  );\n};\n\nexport default Education;\n","import React from \"react\";\nimport \"./MultiLineInput.scss\";\n\nconst MultiLineInput = ({\n  label,\n  saved,\n  inputValue,\n  inputkey,\n  inputChange,\n}) => (\n  <div className=\"textarea-question\">\n    <label className=\"regular-font-size\">{label}</label>\n    {saved ? (\n      <span className=\"regular-font-size\">{inputValue}</span>\n    ) : (\n      <textarea\n        className=\"hover-highlight regular-font-size border-radius border-width\"\n        rows=\"4\"\n        value={inputValue}\n        inputkey={inputkey}\n        onChange={inputChange}\n        required\n      />\n    )}\n  </div>\n);\n\nexport default MultiLineInput;\n","/*almost all a copy of ./src/components/Education.js, with exception of <MultiLineInput /> which is needed to handle main responsibilities question using a textarea\n */\nimport React from \"react\";\nimport FormHeading from \"../FormHeading\";\nimport Button from \"../Button\";\nimport LineInput from \"../LineInput\";\nimport MultiLineInput from \"../MultiLineInput\";\nimport EntryBreak from \"../EntryBreak\";\n\nconst WorkExp = ({\n  data,\n  inputChange,\n  deleteEntry,\n  newEntry,\n  sectionSaveEdit,\n}) => {\n  const entries = data.answers.map((answer, key) => {\n    const { employer, jobTitle, mainTasks, dateFrom, dateTo } = data.answers[\n      key\n    ];\n    const savedLineInput =\n      data.saved && !(data.newEntry && key + 1 === data.answers.length);\n\n    return (\n      <div\n        className=\"group-order-indicator\"\n        grouporder={key}\n        key={key.toString() + \"-job\"}\n      >\n        {key > 0 && <EntryBreak />}\n        <LineInput\n          label=\"Company name\"\n          inputkey=\"employer\"\n          type=\"text\"\n          inputChange={inputChange}\n          inputValue={employer}\n          saved={savedLineInput}\n        />\n        <LineInput\n          label=\"Job title\"\n          inputkey=\"jobTitle\"\n          type=\"text\"\n          inputChange={inputChange}\n          inputValue={jobTitle}\n          saved={savedLineInput}\n        />\n        <MultiLineInput\n          label=\"Main responsibilities\"\n          inputkey=\"mainTasks\"\n          inputChange={inputChange}\n          inputValue={mainTasks}\n          saved={savedLineInput}\n        />\n        <LineInput\n          label=\"Date from\"\n          inputkey=\"dateFrom\"\n          type=\"date\"\n          inputChange={inputChange}\n          inputValue={dateFrom}\n          saved={savedLineInput}\n        />\n        <LineInput\n          label=\"Date to\"\n          inputkey=\"dateTo\"\n          type=\"date\"\n          inputChange={inputChange}\n          inputValue={dateTo}\n          saved={savedLineInput}\n        />\n        {!data.newEntry && !data.saved && (\n          <div className=\"buttons-container\">\n            <Button\n              buttonType=\"button\"\n              clickFunc={deleteEntry}\n              additionalClass=\"danger\"\n            >\n              Delete\n            </Button>\n          </div>\n        )}\n      </div>\n    );\n  });\n\n  const buttonsContainer =\n    data.answers.length === 0 ? (\n      <div className=\"buttons-container\">\n        <Button buttonType=\"button\" clickFunc={newEntry}>\n          Add\n        </Button>\n      </div>\n    ) : data.newEntry || !data.saved ? (\n      <div className=\"buttons-container\">\n        <Button buttonType=\"submit\">Save</Button>\n      </div>\n    ) : (\n      <div className=\"buttons-container\">\n        <Button buttonType=\"submit\">Edit</Button>\n        <div />\n        <Button buttonType=\"button\" clickFunc={newEntry}>\n          Add\n        </Button>\n      </div>\n    );\n\n  return (\n    <form state=\"jobs\" onSubmit={sectionSaveEdit}>\n      <FormHeading title=\"Work Experience\" />\n      {entries}\n      {buttonsContainer}\n    </form>\n  );\n};\n\nexport default WorkExp;\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport { AnswerObj, getStateAttr, getEntryOrder, copyFormData } from \"./common\";\nimport GeneralInfo from \"./components/GeneralInfo\";\nimport Education from \"./components/Education\";\nimport WorkExp from \"./components/WorkExp\";\n\nconst App = () => {\n  //holds the 3 states corresponding to each section. see readme for the rationale behind the AnswerObj object\n  const [formData, setFormData] = useState({\n    /*\n    generalInfo initialised with data because its input html\n      elements appear from the start. For the other 2 sections,\n      the inputs are created when newEntry is triggered.\n    */\n    generalInfo: new AnswerObj([{ name: \"\", email: \"\", phone: \"\" }]),\n    education: new AnswerObj(),\n    jobs: new AnswerObj(),\n  });\n\n  //handles any input changes\n  const inputChange = (event) => {\n    //these 3 values enable the function to figure out which state, entry and input it's being triggered by. See readme for more.\n    const stateKey = getStateAttr(event.target);\n    const entryOrder = getEntryOrder(event.target);\n    const inputKey = event.target.getAttribute(\"inputkey\");\n\n    //deep copy so we can make changes to state object\n    const newFormData = copyFormData(formData);\n\n    //update the relevant input in the state\n    newFormData[stateKey].answers[entryOrder][inputKey] = event.target.value;\n\n    //this to change\n    setFormData(newFormData);\n  };\n\n  //allows inputs to become editable and saves the changes\n  const sectionSaveEdit = (event) => {\n    //the function is triggered by a form submission, so we need to prevent the resulting page refresh\n    event.preventDefault();\n\n    //figure out which section/state we need to update\n    const stateKey = getStateAttr(event.target);\n\n    const newFormData = copyFormData(formData);\n\n    if (formData[stateKey].newEntry) {\n      newFormData[stateKey].newEntry = false;\n      newFormData[stateKey].saved = true;\n    } else {\n      newFormData[stateKey].saved = !newFormData[stateKey].saved;\n    }\n\n    setFormData(newFormData);\n  };\n\n  //enables a new empty entry to appear\n  const newEntry = (event) => {\n    const stateKey = getStateAttr(event.target);\n\n    //create a copy of the existing  relevant state\n    const newFormData = copyFormData(formData);\n\n    //add an empty entry to the state. only need to consider Education and Work Experience sections as General Info doesn't need new entry to be added.\n    const newEntryObj =\n      stateKey === \"education\"\n        ? {\n            school: \"\",\n            course: \"\",\n            dateFrom: \"\",\n            dateTo: \"\",\n          }\n        : {\n            employer: \"\",\n            jobTitle: \"\",\n            mainTasks: \"\",\n            dateFrom: \"\",\n            dateTo: \"\",\n          };\n\n    newFormData[stateKey].answers.push(newEntryObj);\n\n    //indicate that the new entry is editable\n    newFormData[stateKey].newEntry = true;\n\n    setFormData(newFormData);\n  };\n\n  //deletes a specific entry\n  const deleteEntry = (event) => {\n    //find out the entry\n    const stateKey = getStateAttr(event.target);\n    const entryOrder = getEntryOrder(event.target);\n\n    const newFormData = copyFormData(formData);\n    newFormData[stateKey].answers.splice(entryOrder, 1);\n\n    setFormData(newFormData);\n  };\n\n  const { education, generalInfo, jobs } = formData;\n  return (\n    <div className=\"form-container\">\n      <div className=\"form-heading-container\">\n        <h1>Job Application Form</h1>\n      </div>\n      <div className=\"form-body-container\">\n        <GeneralInfo\n          data={generalInfo}\n          inputChange={inputChange}\n          sectionSaveEdit={sectionSaveEdit}\n        />\n        <Education\n          data={education}\n          inputChange={inputChange}\n          sectionSaveEdit={sectionSaveEdit}\n          newEntry={newEntry}\n          deleteEntry={deleteEntry}\n        />\n        <WorkExp\n          data={jobs}\n          inputChange={inputChange}\n          sectionSaveEdit={sectionSaveEdit}\n          newEntry={newEntry}\n          deleteEntry={deleteEntry}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}